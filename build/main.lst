ARM GAS  /tmp/cc0gHuim.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB163:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "cmsis_os.h"
  24:Src/main.c    **** #include "lwip.h"
  25:Src/main.c    **** #include "sockets.h"
  26:Src/main.c    **** 
  27:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  28:Src/main.c    **** /* USER CODE BEGIN Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* USER CODE END Includes */
  31:Src/main.c    **** 
ARM GAS  /tmp/cc0gHuim.s 			page 2


  32:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  33:Src/main.c    **** /* USER CODE BEGIN PTD */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* USER CODE END PTD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  38:Src/main.c    **** /* USER CODE BEGIN PD */
  39:Src/main.c    **** /* USER CODE END PD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PM */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* USER CODE END PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** UART_HandleTypeDef huart3;
  48:Src/main.c    **** 
  49:Src/main.c    **** PCD_HandleTypeDef hpcd_USB_OTG_FS;
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Definitions for defaultTask */
  52:Src/main.c    **** osThreadId_t defaultTaskHandle;
  53:Src/main.c    **** const osThreadAttr_t defaultTask_attributes = {
  54:Src/main.c    ****   .name = "defaultTask",
  55:Src/main.c    ****   .priority = (osPriority_t) osPriorityNormal,
  56:Src/main.c    ****   .stack_size = 128 * 4
  57:Src/main.c    **** };
  58:Src/main.c    **** /* USER CODE BEGIN PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE END PV */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  63:Src/main.c    **** void SystemClock_Config(void);
  64:Src/main.c    **** static void MX_GPIO_Init(void);
  65:Src/main.c    **** static void MX_USART3_UART_Init(void);
  66:Src/main.c    **** static void MX_USB_OTG_FS_PCD_Init(void);
  67:Src/main.c    **** void StartDefaultTask(void *argument);
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE BEGIN PFP */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE END PFP */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  74:Src/main.c    **** /* USER CODE BEGIN 0 */
  75:Src/main.c    **** 
  76:Src/main.c    **** /* USER CODE END 0 */
  77:Src/main.c    **** 
  78:Src/main.c    **** /**
  79:Src/main.c    ****   * @brief  The application entry point.
  80:Src/main.c    ****   * @retval int
  81:Src/main.c    ****   */
  82:Src/main.c    **** int main(void)
  83:Src/main.c    **** {
  84:Src/main.c    ****   /* USER CODE BEGIN 1 */
  85:Src/main.c    **** 
  86:Src/main.c    ****   /* USER CODE END 1 */
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
ARM GAS  /tmp/cc0gHuim.s 			page 3


  89:Src/main.c    **** 
  90:Src/main.c    ****   // Testing the crystal: TODO remove these lines
  91:Src/main.c    ****   RCC->CR |= RCC_CR_HSEON;
  92:Src/main.c    **** 	while(!(RCC->CR & RCC_CR_HSERDY))
  93:Src/main.c    **** 		__ISB();
  94:Src/main.c    **** 	__DSB(); // set breakpoint here, is it reached?
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  97:Src/main.c    ****   HAL_Init();
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* USER CODE BEGIN Init */
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE END Init */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* Configure the system clock */
 104:Src/main.c    ****   SystemClock_Config();
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE END SysInit */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* Initialize all configured peripherals */
 111:Src/main.c    ****   MX_GPIO_Init();
 112:Src/main.c    ****   MX_USART3_UART_Init();
 113:Src/main.c    ****   // MX_USB_OTG_FS_PCD_Init();
 114:Src/main.c    ****   /* USER CODE BEGIN 2 */
 115:Src/main.c    **** 
 116:Src/main.c    ****   // For testing: attempt to repeatedly message UART
 117:Src/main.c    ****   // Before the OS is initialized.
 118:Src/main.c    ****   // char *data = "Hello from main!\n";
 119:Src/main.c    ****   // while(1) {
 120:Src/main.c    ****   //   // Toggle an LED
 121:Src/main.c    ****   //   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 122:Src/main.c    ****   //   HAL_Delay(1000);
 123:Src/main.c    ****   //   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 124:Src/main.c    ****   //   HAL_Delay(1000);
 125:Src/main.c    ****   //   HAL_UART_Transmit(&huart3, data, strlen(data), 50);
 126:Src/main.c    ****   // }
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* USER CODE END 2 */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* Init scheduler */
 131:Src/main.c    ****   osKernelInitialize();
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 134:Src/main.c    ****   /* add mutexes, ... */
 135:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 136:Src/main.c    **** 
 137:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 138:Src/main.c    ****   /* add semaphores, ... */
 139:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 140:Src/main.c    **** 
 141:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 142:Src/main.c    ****   /* start timers, add new ones, ... */
 143:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 144:Src/main.c    **** 
 145:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
ARM GAS  /tmp/cc0gHuim.s 			page 4


 146:Src/main.c    ****   /* add queues, ... */
 147:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 148:Src/main.c    **** 
 149:Src/main.c    ****   /* Create the thread(s) */
 150:Src/main.c    ****   /* creation of defaultTask */
 151:Src/main.c    ****   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 152:Src/main.c    **** 
 153:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 154:Src/main.c    ****   /* add threads, ... */
 155:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 156:Src/main.c    **** 
 157:Src/main.c    ****   /* Start scheduler */
 158:Src/main.c    ****   osKernelStart();
 159:Src/main.c    ****  
 160:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 161:Src/main.c    ****   /* Infinite loop */
 162:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 163:Src/main.c    ****   while (1)
 164:Src/main.c    ****   {
 165:Src/main.c    ****     /* USER CODE END WHILE */
 166:Src/main.c    **** 
 167:Src/main.c    ****     /* USER CODE BEGIN 3 */
 168:Src/main.c    ****   }
 169:Src/main.c    ****   /* USER CODE END 3 */
 170:Src/main.c    **** }
 171:Src/main.c    **** 
 172:Src/main.c    **** /**
 173:Src/main.c    ****   * @brief System Clock Configuration
 174:Src/main.c    ****   * @retval None
 175:Src/main.c    ****   */
 176:Src/main.c    **** void SystemClock_Config(void)
 177:Src/main.c    **** {
 178:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 179:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 180:Src/main.c    **** 
 181:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 182:Src/main.c    ****   */
 183:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 184:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 185:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 186:Src/main.c    ****   */
 187:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 188:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 189:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 190:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 191:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 4;
 192:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 168;
 193:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 195:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 196:Src/main.c    ****   {
 197:Src/main.c    ****     Error_Handler();
 198:Src/main.c    ****   }
 199:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 200:Src/main.c    ****   */
 201:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 202:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  /tmp/cc0gHuim.s 			page 5


 203:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 204:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 205:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 206:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 207:Src/main.c    **** 
 208:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 209:Src/main.c    ****   {
 210:Src/main.c    ****     Error_Handler();
 211:Src/main.c    ****   }
 212:Src/main.c    **** }
 213:Src/main.c    **** 
 214:Src/main.c    **** /**
 215:Src/main.c    ****   * @brief USART3 Initialization Function
 216:Src/main.c    ****   * @param None
 217:Src/main.c    ****   * @retval None
 218:Src/main.c    ****   */
 219:Src/main.c    **** static void MX_USART3_UART_Init(void)
 220:Src/main.c    **** {
 221:Src/main.c    **** 
 222:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 0 */
 223:Src/main.c    **** 
 224:Src/main.c    ****   /* USER CODE END USART3_Init 0 */
 225:Src/main.c    **** 
 226:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 1 */
 227:Src/main.c    **** 
 228:Src/main.c    ****   /* USER CODE END USART3_Init 1 */
 229:Src/main.c    ****   huart3.Instance = USART3;
 230:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 231:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 232:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 233:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 234:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 235:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 236:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 237:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 238:Src/main.c    ****   {
 239:Src/main.c    ****     Error_Handler();
 240:Src/main.c    ****   }
 241:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 2 */
 242:Src/main.c    **** 
 243:Src/main.c    ****   /* USER CODE END USART3_Init 2 */
 244:Src/main.c    **** 
 245:Src/main.c    **** }
 246:Src/main.c    **** 
 247:Src/main.c    **** /**
 248:Src/main.c    ****   * @brief USB_OTG_FS Initialization Function
 249:Src/main.c    ****   * @param None
 250:Src/main.c    ****   * @retval None
 251:Src/main.c    ****   */
 252:Src/main.c    **** static void MX_USB_OTG_FS_PCD_Init(void)
 253:Src/main.c    **** {
 254:Src/main.c    **** 
 255:Src/main.c    ****   /* USER CODE BEGIN USB_OTG_FS_Init 0 */
 256:Src/main.c    **** 
 257:Src/main.c    ****   /* USER CODE END USB_OTG_FS_Init 0 */
 258:Src/main.c    **** 
 259:Src/main.c    ****   /* USER CODE BEGIN USB_OTG_FS_Init 1 */
ARM GAS  /tmp/cc0gHuim.s 			page 6


 260:Src/main.c    **** 
 261:Src/main.c    ****   /* USER CODE END USB_OTG_FS_Init 1 */
 262:Src/main.c    ****   hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 263:Src/main.c    ****   hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 264:Src/main.c    ****   hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 265:Src/main.c    ****   hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 266:Src/main.c    ****   hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 267:Src/main.c    ****   hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 268:Src/main.c    ****   hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 269:Src/main.c    ****   hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 270:Src/main.c    ****   hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 271:Src/main.c    ****   hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 272:Src/main.c    ****   if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 273:Src/main.c    ****   {
 274:Src/main.c    ****     Error_Handler();
 275:Src/main.c    ****   }
 276:Src/main.c    ****   /* USER CODE BEGIN USB_OTG_FS_Init 2 */
 277:Src/main.c    **** 
 278:Src/main.c    ****   /* USER CODE END USB_OTG_FS_Init 2 */
 279:Src/main.c    **** 
 280:Src/main.c    **** }
 281:Src/main.c    **** 
 282:Src/main.c    **** /**
 283:Src/main.c    ****   * @brief GPIO Initialization Function
 284:Src/main.c    ****   * @param None
 285:Src/main.c    ****   * @retval None
 286:Src/main.c    ****   */
 287:Src/main.c    **** static void MX_GPIO_Init(void)
 288:Src/main.c    **** {
  28              		.loc 1 288 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 48
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 00B5     		push	{lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 14, -4
  36 0002 8DB0     		sub	sp, sp, #52
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 56
 289:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 289 3 view .LVU1
  40              		.loc 1 289 20 is_stmt 0 view .LVU2
  41 0004 0022     		movs	r2, #0
  42 0006 0B92     		str	r2, [sp, #44]
 290:Src/main.c    **** 
 291:Src/main.c    ****   /* GPIO Ports Clock Enable */
 292:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  43              		.loc 1 292 3 is_stmt 1 view .LVU3
  44              	.LBB6:
  45              		.loc 1 292 3 view .LVU4
  46 0008 0092     		str	r2, [sp]
  47              		.loc 1 292 3 view .LVU5
  48 000a 2A4B     		ldr	r3, .L3
  49 000c 196B     		ldr	r1, [r3, #48]
  50 000e 41F00401 		orr	r1, r1, #4
  51 0012 1963     		str	r1, [r3, #48]
ARM GAS  /tmp/cc0gHuim.s 			page 7


  52              		.loc 1 292 3 view .LVU6
  53 0014 196B     		ldr	r1, [r3, #48]
  54 0016 01F00401 		and	r1, r1, #4
  55 001a 0091     		str	r1, [sp]
  56              		.loc 1 292 3 view .LVU7
  57 001c 0099     		ldr	r1, [sp]
  58              	.LBE6:
  59              		.loc 1 292 3 view .LVU8
 293:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  60              		.loc 1 293 3 view .LVU9
  61              	.LBB7:
  62              		.loc 1 293 3 view .LVU10
  63 001e 0192     		str	r2, [sp, #4]
  64              		.loc 1 293 3 view .LVU11
  65 0020 196B     		ldr	r1, [r3, #48]
  66 0022 41F08001 		orr	r1, r1, #128
  67 0026 1963     		str	r1, [r3, #48]
  68              		.loc 1 293 3 view .LVU12
  69 0028 196B     		ldr	r1, [r3, #48]
  70 002a 01F08001 		and	r1, r1, #128
  71 002e 0191     		str	r1, [sp, #4]
  72              		.loc 1 293 3 view .LVU13
  73 0030 0199     		ldr	r1, [sp, #4]
  74              	.LBE7:
  75              		.loc 1 293 3 view .LVU14
 294:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  76              		.loc 1 294 3 view .LVU15
  77              	.LBB8:
  78              		.loc 1 294 3 view .LVU16
  79 0032 0292     		str	r2, [sp, #8]
  80              		.loc 1 294 3 view .LVU17
  81 0034 196B     		ldr	r1, [r3, #48]
  82 0036 41F00101 		orr	r1, r1, #1
  83 003a 1963     		str	r1, [r3, #48]
  84              		.loc 1 294 3 view .LVU18
  85 003c 196B     		ldr	r1, [r3, #48]
  86 003e 01F00101 		and	r1, r1, #1
  87 0042 0291     		str	r1, [sp, #8]
  88              		.loc 1 294 3 view .LVU19
  89 0044 0299     		ldr	r1, [sp, #8]
  90              	.LBE8:
  91              		.loc 1 294 3 view .LVU20
 295:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  92              		.loc 1 295 3 view .LVU21
  93              	.LBB9:
  94              		.loc 1 295 3 view .LVU22
  95 0046 0392     		str	r2, [sp, #12]
  96              		.loc 1 295 3 view .LVU23
  97 0048 196B     		ldr	r1, [r3, #48]
  98 004a 41F00201 		orr	r1, r1, #2
  99 004e 1963     		str	r1, [r3, #48]
 100              		.loc 1 295 3 view .LVU24
 101 0050 196B     		ldr	r1, [r3, #48]
 102 0052 01F00201 		and	r1, r1, #2
 103 0056 0391     		str	r1, [sp, #12]
 104              		.loc 1 295 3 view .LVU25
 105 0058 0399     		ldr	r1, [sp, #12]
ARM GAS  /tmp/cc0gHuim.s 			page 8


 106              	.LBE9:
 107              		.loc 1 295 3 view .LVU26
 296:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 108              		.loc 1 296 3 view .LVU27
 109              	.LBB10:
 110              		.loc 1 296 3 view .LVU28
 111 005a 0492     		str	r2, [sp, #16]
 112              		.loc 1 296 3 view .LVU29
 113 005c 196B     		ldr	r1, [r3, #48]
 114 005e 41F00801 		orr	r1, r1, #8
 115 0062 1963     		str	r1, [r3, #48]
 116              		.loc 1 296 3 view .LVU30
 117 0064 196B     		ldr	r1, [r3, #48]
 118 0066 01F00801 		and	r1, r1, #8
 119 006a 0491     		str	r1, [sp, #16]
 120              		.loc 1 296 3 view .LVU31
 121 006c 0499     		ldr	r1, [sp, #16]
 122              	.LBE10:
 123              		.loc 1 296 3 view .LVU32
 297:Src/main.c    ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 124              		.loc 1 297 3 view .LVU33
 125              	.LBB11:
 126              		.loc 1 297 3 view .LVU34
 127 006e 0592     		str	r2, [sp, #20]
 128              		.loc 1 297 3 view .LVU35
 129 0070 196B     		ldr	r1, [r3, #48]
 130 0072 41F04001 		orr	r1, r1, #64
 131 0076 1963     		str	r1, [r3, #48]
 132              		.loc 1 297 3 view .LVU36
 133 0078 196B     		ldr	r1, [r3, #48]
 134 007a 01F04001 		and	r1, r1, #64
 135 007e 0591     		str	r1, [sp, #20]
 136              		.loc 1 297 3 view .LVU37
 137 0080 0599     		ldr	r1, [sp, #20]
 138              	.LBE11:
 139              		.loc 1 297 3 view .LVU38
 298:Src/main.c    **** 
 299:Src/main.c    ****   // /*Configure GPIO pin Output Level */
 300:Src/main.c    ****   // HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 301:Src/main.c    **** 
 302:Src/main.c    ****   // /*Configure GPIO pin Output Level */
 303:Src/main.c    ****   // HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 304:Src/main.c    **** 
 305:Src/main.c    ****   // /*Configure GPIO pin : USER_Btn_Pin */
 306:Src/main.c    ****   // GPIO_InitStruct.Pin = USER_Btn_Pin;
 307:Src/main.c    ****   // GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 308:Src/main.c    ****   // GPIO_InitStruct.Pull = GPIO_NOPULL;
 309:Src/main.c    ****   // HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 310:Src/main.c    **** 
 311:Src/main.c    ****   // /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
 312:Src/main.c    ****   // GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 313:Src/main.c    ****   // GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 314:Src/main.c    ****   // GPIO_InitStruct.Pull = GPIO_NOPULL;
 315:Src/main.c    ****   // GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 316:Src/main.c    ****   // HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 317:Src/main.c    **** 
 318:Src/main.c    ****   // /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
ARM GAS  /tmp/cc0gHuim.s 			page 9


 319:Src/main.c    ****   // GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 320:Src/main.c    ****   // GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 321:Src/main.c    ****   // GPIO_InitStruct.Pull = GPIO_NOPULL;
 322:Src/main.c    ****   // GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 323:Src/main.c    ****   // HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 324:Src/main.c    **** 
 325:Src/main.c    ****   // /*Configure GPIO pin : USB_OverCurrent_Pin */
 326:Src/main.c    ****   // GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 327:Src/main.c    ****   // GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 328:Src/main.c    ****   // GPIO_InitStruct.Pull = GPIO_NOPULL;
 329:Src/main.c    ****   // HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 330:Src/main.c    **** 
 331:Src/main.c    ****   // Initialize some LEDs
 332:Src/main.c    ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 140              		.loc 1 332 3 view .LVU39
 141              	.LBB12:
 142              		.loc 1 332 3 view .LVU40
 143 0082 0692     		str	r2, [sp, #24]
 144              		.loc 1 332 3 view .LVU41
 145 0084 196B     		ldr	r1, [r3, #48]
 146 0086 41F01001 		orr	r1, r1, #16
 147 008a 1963     		str	r1, [r3, #48]
 148              		.loc 1 332 3 view .LVU42
 149 008c 1B6B     		ldr	r3, [r3, #48]
 150 008e 03F01003 		and	r3, r3, #16
 151 0092 0693     		str	r3, [sp, #24]
 152              		.loc 1 332 3 view .LVU43
 153 0094 069B     		ldr	r3, [sp, #24]
 154              	.LBE12:
 155              		.loc 1 332 3 view .LVU44
 333:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_12 | GPIO_PIN_11 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_P
 156              		.loc 1 333 3 view .LVU45
 157              		.loc 1 333 23 is_stmt 0 view .LVU46
 158 0096 4FF47C53 		mov	r3, #16128
 159 009a 0793     		str	r3, [sp, #28]
 334:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 160              		.loc 1 334 3 is_stmt 1 view .LVU47
 161              		.loc 1 334 24 is_stmt 0 view .LVU48
 162 009c 0123     		movs	r3, #1
 163 009e 0893     		str	r3, [sp, #32]
 335:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 164              		.loc 1 335 3 is_stmt 1 view .LVU49
 165              		.loc 1 335 24 is_stmt 0 view .LVU50
 166 00a0 0992     		str	r2, [sp, #36]
 336:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 167              		.loc 1 336 3 is_stmt 1 view .LVU51
 168              		.loc 1 336 25 is_stmt 0 view .LVU52
 169 00a2 0A92     		str	r2, [sp, #40]
 337:Src/main.c    ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 170              		.loc 1 337 3 is_stmt 1 view .LVU53
 171 00a4 07A9     		add	r1, sp, #28
 172 00a6 0448     		ldr	r0, .L3+4
 173 00a8 FFF7FEFF 		bl	HAL_GPIO_Init
 174              	.LVL0:
 338:Src/main.c    **** }
 175              		.loc 1 338 1 is_stmt 0 view .LVU54
 176 00ac 0DB0     		add	sp, sp, #52
ARM GAS  /tmp/cc0gHuim.s 			page 10


 177              	.LCFI2:
 178              		.cfi_def_cfa_offset 4
 179              		@ sp needed
 180 00ae 5DF804FB 		ldr	pc, [sp], #4
 181              	.L4:
 182 00b2 00BF     		.align	2
 183              	.L3:
 184 00b4 00380240 		.word	1073887232
 185 00b8 00100240 		.word	1073876992
 186              		.cfi_endproc
 187              	.LFE163:
 189              		.section	.rodata.StartDefaultTask.str1.4,"aMS",%progbits,1
 190              		.align	2
 191              	.LC0:
 192 0000 43686563 		.ascii	"Checkpoint 1\012\000"
 192      6B706F69 
 192      6E742031 
 192      0A00
 193 000e 0000     		.align	2
 194              	.LC1:
 195 0010 43686563 		.ascii	"Checkpoint 2\012\000"
 195      6B706F69 
 195      6E742032 
 195      0A00
 196 001e 0000     		.align	2
 197              	.LC2:
 198 0020 43686563 		.ascii	"Checkpoint 3\012\000"
 198      6B706F69 
 198      6E742033 
 198      0A00
 199 002e 0000     		.align	2
 200              	.LC3:
 201 0030 43686563 		.ascii	"Checkpoint 4\012\000"
 201      6B706F69 
 201      6E742034 
 201      0A00
 202              		.section	.text.StartDefaultTask,"ax",%progbits
 203              		.align	1
 204              		.global	StartDefaultTask
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 208              		.fpu fpv4-sp-d16
 210              	StartDefaultTask:
 211              	.LVL1:
 212              	.LFB164:
 339:Src/main.c    **** 
 340:Src/main.c    **** /* USER CODE BEGIN 4 */
 341:Src/main.c    **** 
 342:Src/main.c    **** /* USER CODE END 4 */
 343:Src/main.c    **** 
 344:Src/main.c    **** /* USER CODE BEGIN Header_StartDefaultTask */
 345:Src/main.c    **** /**
 346:Src/main.c    ****   * @brief  Function implementing the defaultTask thread.
 347:Src/main.c    ****   * @param  argument: Not used 
 348:Src/main.c    ****   * @retval None
 349:Src/main.c    ****   */
ARM GAS  /tmp/cc0gHuim.s 			page 11


 350:Src/main.c    **** /* USER CODE END Header_StartDefaultTask */
 351:Src/main.c    **** void StartDefaultTask(void *argument)
 352:Src/main.c    **** {
 213              		.loc 1 352 1 is_stmt 1 view -0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 1064
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217              		.loc 1 352 1 is_stmt 0 view .LVU56
 218 0000 70B5     		push	{r4, r5, r6, lr}
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 16
 221              		.cfi_offset 4, -16
 222              		.cfi_offset 5, -12
 223              		.cfi_offset 6, -8
 224              		.cfi_offset 14, -4
 225 0002 ADF5856D 		sub	sp, sp, #1064
 226              	.LCFI4:
 227              		.cfi_def_cfa_offset 1080
 353:Src/main.c    ****   struct sockaddr_in sLocalAddr;
 228              		.loc 1 353 3 is_stmt 1 view .LVU57
 354:Src/main.c    **** 
 355:Src/main.c    ****   char *data = "Checkpoint 1\n";
 229              		.loc 1 355 3 view .LVU58
 230              	.LVL2:
 356:Src/main.c    ****   HAL_UART_Transmit(&huart3, data, strlen(data), 50);
 231              		.loc 1 356 3 view .LVU59
 232 0006 374C     		ldr	r4, .L15
 233 0008 3223     		movs	r3, #50
 234 000a 0D22     		movs	r2, #13
 235 000c 3649     		ldr	r1, .L15+4
 236 000e 2046     		mov	r0, r4
 237              	.LVL3:
 238              		.loc 1 356 3 is_stmt 0 view .LVU60
 239 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 240              	.LVL4:
 357:Src/main.c    **** 
 358:Src/main.c    ****   /* init code for LWIP */
 359:Src/main.c    ****   MX_LWIP_Init();
 241              		.loc 1 359 3 is_stmt 1 view .LVU61
 242 0014 FFF7FEFF 		bl	MX_LWIP_Init
 243              	.LVL5:
 360:Src/main.c    **** 
 361:Src/main.c    ****   /* USER CODE BEGIN 5 */  
 362:Src/main.c    ****   int lSocket = lwip_socket(AF_INET, SOCK_STREAM, 0);
 244              		.loc 1 362 3 view .LVU62
 245              		.loc 1 362 17 is_stmt 0 view .LVU63
 246 0018 0022     		movs	r2, #0
 247 001a 0121     		movs	r1, #1
 248 001c 0220     		movs	r0, #2
 249 001e FFF7FEFF 		bl	lwip_socket
 250              	.LVL6:
 251 0022 0646     		mov	r6, r0
 252              	.LVL7:
 363:Src/main.c    **** 
 364:Src/main.c    ****   data = "Checkpoint 2\n";
 253              		.loc 1 364 3 is_stmt 1 view .LVU64
 365:Src/main.c    ****   HAL_UART_Transmit(&huart3, data, strlen(data), 50);
ARM GAS  /tmp/cc0gHuim.s 			page 12


 254              		.loc 1 365 3 view .LVU65
 255 0024 3223     		movs	r3, #50
 256 0026 0D22     		movs	r2, #13
 257 0028 3049     		ldr	r1, .L15+8
 258 002a 2046     		mov	r0, r4
 259              	.LVL8:
 260              		.loc 1 365 3 is_stmt 0 view .LVU66
 261 002c FFF7FEFF 		bl	HAL_UART_Transmit
 262              	.LVL9:
 366:Src/main.c    **** 
 367:Src/main.c    ****   // TODO: replace all the returns in this function with some error handling.
 368:Src/main.c    ****   if(lSocket < 0) return;
 263              		.loc 1 368 3 is_stmt 1 view .LVU67
 264              		.loc 1 368 5 is_stmt 0 view .LVU68
 265 0030 002E     		cmp	r6, #0
 266 0032 3DDB     		blt	.L5
 369:Src/main.c    ****   
 370:Src/main.c    ****   memset((char*)&sLocalAddr, 0, sizeof(sLocalAddr));
 267              		.loc 1 370 3 is_stmt 1 view .LVU69
 268 0034 0020     		movs	r0, #0
 269 0036 CDF81804 		str	r0, [sp, #1048]
 270 003a CDF81C04 		str	r0, [sp, #1052]
 271 003e CDF82004 		str	r0, [sp, #1056]
 272 0042 CDF82404 		str	r0, [sp, #1060]
 371:Src/main.c    ****   sLocalAddr.sin_family = AF_INET;
 273              		.loc 1 371 3 view .LVU70
 274              		.loc 1 371 25 is_stmt 0 view .LVU71
 275 0046 0223     		movs	r3, #2
 276 0048 8DF81934 		strb	r3, [sp, #1049]
 372:Src/main.c    ****   sLocalAddr.sin_len    = sizeof(sLocalAddr);
 277              		.loc 1 372 3 is_stmt 1 view .LVU72
 278              		.loc 1 372 25 is_stmt 0 view .LVU73
 279 004c 1024     		movs	r4, #16
 280 004e 8DF81844 		strb	r4, [sp, #1048]
 373:Src/main.c    ****   sLocalAddr.sin_addr.s_addr = htonl(INADDR_ANY);
 281              		.loc 1 373 3 is_stmt 1 view .LVU74
 282              		.loc 1 373 32 is_stmt 0 view .LVU75
 283 0052 FFF7FEFF 		bl	lwip_htonl
 284              	.LVL10:
 285              		.loc 1 373 30 view .LVU76
 286 0056 CDF81C04 		str	r0, [sp, #1052]
 374:Src/main.c    ****   sLocalAddr.sin_port   = htons(23);
 287              		.loc 1 374 3 is_stmt 1 view .LVU77
 288              		.loc 1 374 27 is_stmt 0 view .LVU78
 289 005a 1720     		movs	r0, #23
 290 005c FFF7FEFF 		bl	lwip_htons
 291              	.LVL11:
 292              		.loc 1 374 25 view .LVU79
 293 0060 ADF81A04 		strh	r0, [sp, #1050]	@ movhi
 375:Src/main.c    **** 
 376:Src/main.c    ****   if(lwip_bind(lSocket, (struct sockaddr*)&sLocalAddr, sizeof(sLocalAddr)) < 0) {
 294              		.loc 1 376 3 is_stmt 1 view .LVU80
 295              		.loc 1 376 6 is_stmt 0 view .LVU81
 296 0064 2246     		mov	r2, r4
 297 0066 0DF58361 		add	r1, sp, #1048
 298 006a 3046     		mov	r0, r6
 299 006c FFF7FEFF 		bl	lwip_bind
ARM GAS  /tmp/cc0gHuim.s 			page 13


 300              	.LVL12:
 301              		.loc 1 376 5 view .LVU82
 302 0070 0028     		cmp	r0, #0
 303 0072 1ADB     		blt	.L13
 377:Src/main.c    ****     lwip_close(lSocket);
 378:Src/main.c    ****     return;
 379:Src/main.c    ****   }
 380:Src/main.c    **** 
 381:Src/main.c    ****   data = "Checkpoint 3\n";
 304              		.loc 1 381 3 is_stmt 1 view .LVU83
 305              	.LVL13:
 382:Src/main.c    ****   HAL_UART_Transmit(&huart3, data, strlen(data), 50);
 306              		.loc 1 382 3 view .LVU84
 307 0074 3223     		movs	r3, #50
 308 0076 0D22     		movs	r2, #13
 309 0078 1D49     		ldr	r1, .L15+12
 310 007a 1A48     		ldr	r0, .L15
 311 007c FFF7FEFF 		bl	HAL_UART_Transmit
 312              	.LVL14:
 383:Src/main.c    **** 
 384:Src/main.c    ****   if(lwip_listen(lSocket, 20) != 0) {
 313              		.loc 1 384 3 view .LVU85
 314              		.loc 1 384 6 is_stmt 0 view .LVU86
 315 0080 1421     		movs	r1, #20
 316 0082 3046     		mov	r0, r6
 317 0084 FFF7FEFF 		bl	lwip_listen
 318              	.LVL15:
 319              		.loc 1 384 5 view .LVU87
 320 0088 A8B9     		cbnz	r0, .L14
 321              	.LVL16:
 322              	.L8:
 385:Src/main.c    ****     lwip_close(lSocket);
 386:Src/main.c    ****     return;
 387:Src/main.c    ****   }
 388:Src/main.c    **** 
 389:Src/main.c    ****   /* Infinite loop */
 390:Src/main.c    ****   while(1)
 323              		.loc 1 390 3 is_stmt 1 view .LVU88
 324              	.LBB13:
 391:Src/main.c    ****   {
 392:Src/main.c    ****     int clientfd;
 325              		.loc 1 392 5 view .LVU89
 393:Src/main.c    ****     struct sockaddr_in client_addr;
 326              		.loc 1 393 5 view .LVU90
 394:Src/main.c    ****     int addrlen = sizeof(client_addr);
 327              		.loc 1 394 5 view .LVU91
 328              		.loc 1 394 9 is_stmt 0 view .LVU92
 329 008a 1023     		movs	r3, #16
 330 008c 0193     		str	r3, [sp, #4]
 395:Src/main.c    ****     char buffer[1024];
 331              		.loc 1 395 5 is_stmt 1 view .LVU93
 396:Src/main.c    ****     int nbytes;
 332              		.loc 1 396 5 view .LVU94
 397:Src/main.c    **** 
 398:Src/main.c    ****     data = "Checkpoint 4\n";
 333              		.loc 1 398 5 view .LVU95
 334              	.LVL17:
ARM GAS  /tmp/cc0gHuim.s 			page 14


 399:Src/main.c    ****     HAL_UART_Transmit(&huart3, data, strlen(data), 50);
 335              		.loc 1 399 5 view .LVU96
 336 008e 3223     		movs	r3, #50
 337 0090 0D22     		movs	r2, #13
 338 0092 1849     		ldr	r1, .L15+16
 339 0094 1348     		ldr	r0, .L15
 340 0096 FFF7FEFF 		bl	HAL_UART_Transmit
 341              	.LVL18:
 400:Src/main.c    **** 
 401:Src/main.c    ****     clientfd = lwip_accept(lSocket, (struct sockaddr*)&client_addr, (socklen_t*)&addrlen);
 342              		.loc 1 401 5 view .LVU97
 343              		.loc 1 401 16 is_stmt 0 view .LVU98
 344 009a 01AA     		add	r2, sp, #4
 345 009c 02A9     		add	r1, sp, #8
 346 009e 3046     		mov	r0, r6
 347 00a0 FFF7FEFF 		bl	lwip_accept
 348              	.LVL19:
 402:Src/main.c    ****     if(clientfd > 0) {
 349              		.loc 1 402 5 is_stmt 1 view .LVU99
 350              		.loc 1 402 7 is_stmt 0 view .LVU100
 351 00a4 051E     		subs	r5, r0, #0
 352 00a6 0CDC     		bgt	.L11
 353 00a8 EFE7     		b	.L8
 354              	.LVL20:
 355              	.L13:
 356              		.loc 1 402 7 view .LVU101
 357              	.LBE13:
 377:Src/main.c    ****     return;
 358              		.loc 1 377 5 is_stmt 1 view .LVU102
 359 00aa 3046     		mov	r0, r6
 360 00ac FFF7FEFF 		bl	lwip_close
 361              	.LVL21:
 378:Src/main.c    ****   }
 362              		.loc 1 378 5 view .LVU103
 363              	.L5:
 403:Src/main.c    ****       do {
 404:Src/main.c    ****         nbytes = lwip_recv(clientfd, buffer, sizeof(buffer), 0);
 405:Src/main.c    ****         if(nbytes > 0)  {
 406:Src/main.c    ****           lwip_send(clientfd, buffer, nbytes, 0);
 407:Src/main.c    ****         }
 408:Src/main.c    ****       } while(nbytes > 0);
 409:Src/main.c    ****     }
 410:Src/main.c    ****   }
 411:Src/main.c    **** 
 412:Src/main.c    ****   lwip_close(lSocket);
 413:Src/main.c    ****   /* USER CODE END 5 */ 
 414:Src/main.c    **** }
 364              		.loc 1 414 1 is_stmt 0 view .LVU104
 365 00b0 0DF5856D 		add	sp, sp, #1064
 366              	.LCFI5:
 367              		.cfi_remember_state
 368              		.cfi_def_cfa_offset 16
 369              		@ sp needed
 370 00b4 70BD     		pop	{r4, r5, r6, pc}
 371              	.LVL22:
 372              	.L14:
 373              	.LCFI6:
ARM GAS  /tmp/cc0gHuim.s 			page 15


 374              		.cfi_restore_state
 385:Src/main.c    ****     return;
 375              		.loc 1 385 5 is_stmt 1 view .LVU105
 376 00b6 3046     		mov	r0, r6
 377 00b8 FFF7FEFF 		bl	lwip_close
 378              	.LVL23:
 386:Src/main.c    ****   }
 379              		.loc 1 386 5 view .LVU106
 380 00bc F8E7     		b	.L5
 381              	.LVL24:
 382              	.L10:
 383              	.LBB14:
 408:Src/main.c    ****     }
 384              		.loc 1 408 14 view .LVU107
 408:Src/main.c    ****     }
 385              		.loc 1 408 7 is_stmt 0 view .LVU108
 386 00be 002C     		cmp	r4, #0
 387 00c0 E3DD     		ble	.L8
 388              	.LVL25:
 389              	.L11:
 403:Src/main.c    ****         nbytes = lwip_recv(clientfd, buffer, sizeof(buffer), 0);
 390              		.loc 1 403 7 is_stmt 1 view .LVU109
 404:Src/main.c    ****         if(nbytes > 0)  {
 391              		.loc 1 404 9 view .LVU110
 404:Src/main.c    ****         if(nbytes > 0)  {
 392              		.loc 1 404 18 is_stmt 0 view .LVU111
 393 00c2 0023     		movs	r3, #0
 394 00c4 4FF48062 		mov	r2, #1024
 395 00c8 06A9     		add	r1, sp, #24
 396 00ca 2846     		mov	r0, r5
 397 00cc FFF7FEFF 		bl	lwip_recv
 398              	.LVL26:
 405:Src/main.c    ****           lwip_send(clientfd, buffer, nbytes, 0);
 399              		.loc 1 405 9 is_stmt 1 view .LVU112
 405:Src/main.c    ****           lwip_send(clientfd, buffer, nbytes, 0);
 400              		.loc 1 405 11 is_stmt 0 view .LVU113
 401 00d0 041E     		subs	r4, r0, #0
 402 00d2 F4DD     		ble	.L10
 406:Src/main.c    ****         }
 403              		.loc 1 406 11 is_stmt 1 view .LVU114
 404 00d4 0023     		movs	r3, #0
 405 00d6 2246     		mov	r2, r4
 406 00d8 06A9     		add	r1, sp, #24
 407 00da 2846     		mov	r0, r5
 408              	.LVL27:
 406:Src/main.c    ****         }
 409              		.loc 1 406 11 is_stmt 0 view .LVU115
 410 00dc FFF7FEFF 		bl	lwip_send
 411              	.LVL28:
 406:Src/main.c    ****         }
 412              		.loc 1 406 11 view .LVU116
 413 00e0 EDE7     		b	.L10
 414              	.L16:
 415 00e2 00BF     		.align	2
 416              	.L15:
 417 00e4 00000000 		.word	huart3
 418 00e8 00000000 		.word	.LC0
ARM GAS  /tmp/cc0gHuim.s 			page 16


 419 00ec 10000000 		.word	.LC1
 420 00f0 20000000 		.word	.LC2
 421 00f4 30000000 		.word	.LC3
 422              	.LBE14:
 423              		.cfi_endproc
 424              	.LFE164:
 426              		.section	.text.Error_Handler,"ax",%progbits
 427              		.align	1
 428              		.global	Error_Handler
 429              		.syntax unified
 430              		.thumb
 431              		.thumb_func
 432              		.fpu fpv4-sp-d16
 434              	Error_Handler:
 435              	.LFB165:
 415:Src/main.c    **** 
 416:Src/main.c    **** /**
 417:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 418:Src/main.c    ****   * @retval None
 419:Src/main.c    ****   */
 420:Src/main.c    **** void Error_Handler(void)
 421:Src/main.c    **** {
 436              		.loc 1 421 1 is_stmt 1 view -0
 437              		.cfi_startproc
 438              		@ Volatile: function does not return.
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 442              	.L18:
 422:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 423:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 424:Src/main.c    ****   while(1); // Spin to preserve stack for debugging
 443              		.loc 1 424 3 discriminator 1 view .LVU118
 444              		.loc 1 424 11 discriminator 1 view .LVU119
 445              		.loc 1 424 8 discriminator 1 view .LVU120
 446 0000 FEE7     		b	.L18
 447              		.cfi_endproc
 448              	.LFE165:
 450              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 451              		.align	1
 452              		.syntax unified
 453              		.thumb
 454              		.thumb_func
 455              		.fpu fpv4-sp-d16
 457              	MX_USART3_UART_Init:
 458              	.LFB161:
 220:Src/main.c    **** 
 459              		.loc 1 220 1 view -0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 0
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463 0000 08B5     		push	{r3, lr}
 464              	.LCFI7:
 465              		.cfi_def_cfa_offset 8
 466              		.cfi_offset 3, -8
 467              		.cfi_offset 14, -4
 229:Src/main.c    ****   huart3.Init.BaudRate = 115200;
ARM GAS  /tmp/cc0gHuim.s 			page 17


 468              		.loc 1 229 3 view .LVU122
 229:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 469              		.loc 1 229 19 is_stmt 0 view .LVU123
 470 0002 0A48     		ldr	r0, .L23
 471 0004 0A4B     		ldr	r3, .L23+4
 472 0006 0360     		str	r3, [r0]
 230:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 473              		.loc 1 230 3 is_stmt 1 view .LVU124
 230:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 474              		.loc 1 230 24 is_stmt 0 view .LVU125
 475 0008 4FF4E133 		mov	r3, #115200
 476 000c 4360     		str	r3, [r0, #4]
 231:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 477              		.loc 1 231 3 is_stmt 1 view .LVU126
 231:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 478              		.loc 1 231 26 is_stmt 0 view .LVU127
 479 000e 0023     		movs	r3, #0
 480 0010 8360     		str	r3, [r0, #8]
 232:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 481              		.loc 1 232 3 is_stmt 1 view .LVU128
 232:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 482              		.loc 1 232 24 is_stmt 0 view .LVU129
 483 0012 C360     		str	r3, [r0, #12]
 233:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 484              		.loc 1 233 3 is_stmt 1 view .LVU130
 233:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 485              		.loc 1 233 22 is_stmt 0 view .LVU131
 486 0014 0361     		str	r3, [r0, #16]
 234:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 487              		.loc 1 234 3 is_stmt 1 view .LVU132
 234:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 488              		.loc 1 234 20 is_stmt 0 view .LVU133
 489 0016 0C22     		movs	r2, #12
 490 0018 4261     		str	r2, [r0, #20]
 235:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 491              		.loc 1 235 3 is_stmt 1 view .LVU134
 235:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 492              		.loc 1 235 25 is_stmt 0 view .LVU135
 493 001a 8361     		str	r3, [r0, #24]
 236:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 494              		.loc 1 236 3 is_stmt 1 view .LVU136
 236:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 495              		.loc 1 236 28 is_stmt 0 view .LVU137
 496 001c C361     		str	r3, [r0, #28]
 237:Src/main.c    ****   {
 497              		.loc 1 237 3 is_stmt 1 view .LVU138
 237:Src/main.c    ****   {
 498              		.loc 1 237 7 is_stmt 0 view .LVU139
 499 001e FFF7FEFF 		bl	HAL_UART_Init
 500              	.LVL29:
 237:Src/main.c    ****   {
 501              		.loc 1 237 6 view .LVU140
 502 0022 00B9     		cbnz	r0, .L22
 245:Src/main.c    **** 
 503              		.loc 1 245 1 view .LVU141
 504 0024 08BD     		pop	{r3, pc}
 505              	.L22:
ARM GAS  /tmp/cc0gHuim.s 			page 18


 239:Src/main.c    ****   }
 506              		.loc 1 239 5 is_stmt 1 view .LVU142
 507 0026 FFF7FEFF 		bl	Error_Handler
 508              	.LVL30:
 509              	.L24:
 510 002a 00BF     		.align	2
 511              	.L23:
 512 002c 00000000 		.word	huart3
 513 0030 00480040 		.word	1073760256
 514              		.cfi_endproc
 515              	.LFE161:
 517              		.section	.text.SystemClock_Config,"ax",%progbits
 518              		.align	1
 519              		.global	SystemClock_Config
 520              		.syntax unified
 521              		.thumb
 522              		.thumb_func
 523              		.fpu fpv4-sp-d16
 525              	SystemClock_Config:
 526              	.LFB160:
 177:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 527              		.loc 1 177 1 view -0
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 80
 530              		@ frame_needed = 0, uses_anonymous_args = 0
 531 0000 00B5     		push	{lr}
 532              	.LCFI8:
 533              		.cfi_def_cfa_offset 4
 534              		.cfi_offset 14, -4
 535 0002 95B0     		sub	sp, sp, #84
 536              	.LCFI9:
 537              		.cfi_def_cfa_offset 88
 178:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 538              		.loc 1 178 3 view .LVU144
 178:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 539              		.loc 1 178 22 is_stmt 0 view .LVU145
 540 0004 3022     		movs	r2, #48
 541 0006 0021     		movs	r1, #0
 542 0008 08A8     		add	r0, sp, #32
 543 000a FFF7FEFF 		bl	memset
 544              	.LVL31:
 179:Src/main.c    **** 
 545              		.loc 1 179 3 is_stmt 1 view .LVU146
 179:Src/main.c    **** 
 546              		.loc 1 179 22 is_stmt 0 view .LVU147
 547 000e 0023     		movs	r3, #0
 548 0010 0393     		str	r3, [sp, #12]
 549 0012 0493     		str	r3, [sp, #16]
 550 0014 0593     		str	r3, [sp, #20]
 551 0016 0693     		str	r3, [sp, #24]
 552 0018 0793     		str	r3, [sp, #28]
 183:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 553              		.loc 1 183 3 is_stmt 1 view .LVU148
 554              	.LBB15:
 183:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 555              		.loc 1 183 3 view .LVU149
 556 001a 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cc0gHuim.s 			page 19


 183:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 557              		.loc 1 183 3 view .LVU150
 558 001c 204A     		ldr	r2, .L31
 559 001e 116C     		ldr	r1, [r2, #64]
 560 0020 41F08051 		orr	r1, r1, #268435456
 561 0024 1164     		str	r1, [r2, #64]
 183:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 562              		.loc 1 183 3 view .LVU151
 563 0026 126C     		ldr	r2, [r2, #64]
 564 0028 02F08052 		and	r2, r2, #268435456
 565 002c 0192     		str	r2, [sp, #4]
 183:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 566              		.loc 1 183 3 view .LVU152
 567 002e 019A     		ldr	r2, [sp, #4]
 568              	.LBE15:
 183:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 569              		.loc 1 183 3 view .LVU153
 184:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 570              		.loc 1 184 3 view .LVU154
 571              	.LBB16:
 184:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 572              		.loc 1 184 3 view .LVU155
 573 0030 0293     		str	r3, [sp, #8]
 184:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 574              		.loc 1 184 3 view .LVU156
 575 0032 1C4B     		ldr	r3, .L31+4
 576 0034 1A68     		ldr	r2, [r3]
 577 0036 42F44042 		orr	r2, r2, #49152
 578 003a 1A60     		str	r2, [r3]
 184:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 579              		.loc 1 184 3 view .LVU157
 580 003c 1B68     		ldr	r3, [r3]
 581 003e 03F44043 		and	r3, r3, #49152
 582 0042 0293     		str	r3, [sp, #8]
 184:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 583              		.loc 1 184 3 view .LVU158
 584 0044 029B     		ldr	r3, [sp, #8]
 585              	.LBE16:
 184:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 586              		.loc 1 184 3 view .LVU159
 187:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 587              		.loc 1 187 3 view .LVU160
 187:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 588              		.loc 1 187 36 is_stmt 0 view .LVU161
 589 0046 0123     		movs	r3, #1
 590 0048 0893     		str	r3, [sp, #32]
 188:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 591              		.loc 1 188 3 is_stmt 1 view .LVU162
 188:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 592              		.loc 1 188 30 is_stmt 0 view .LVU163
 593 004a 4FF4A023 		mov	r3, #327680
 594 004e 0993     		str	r3, [sp, #36]
 189:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 595              		.loc 1 189 3 is_stmt 1 view .LVU164
 189:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 596              		.loc 1 189 34 is_stmt 0 view .LVU165
 597 0050 0223     		movs	r3, #2
ARM GAS  /tmp/cc0gHuim.s 			page 20


 598 0052 0E93     		str	r3, [sp, #56]
 190:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 4;
 599              		.loc 1 190 3 is_stmt 1 view .LVU166
 190:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 4;
 600              		.loc 1 190 35 is_stmt 0 view .LVU167
 601 0054 4FF48002 		mov	r2, #4194304
 602 0058 0F92     		str	r2, [sp, #60]
 191:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 168;
 603              		.loc 1 191 3 is_stmt 1 view .LVU168
 191:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 168;
 604              		.loc 1 191 30 is_stmt 0 view .LVU169
 605 005a 0422     		movs	r2, #4
 606 005c 1092     		str	r2, [sp, #64]
 192:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 607              		.loc 1 192 3 is_stmt 1 view .LVU170
 192:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 608              		.loc 1 192 30 is_stmt 0 view .LVU171
 609 005e A822     		movs	r2, #168
 610 0060 1192     		str	r2, [sp, #68]
 193:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 611              		.loc 1 193 3 is_stmt 1 view .LVU172
 193:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 612              		.loc 1 193 30 is_stmt 0 view .LVU173
 613 0062 1293     		str	r3, [sp, #72]
 194:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 614              		.loc 1 194 3 is_stmt 1 view .LVU174
 194:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 615              		.loc 1 194 30 is_stmt 0 view .LVU175
 616 0064 0723     		movs	r3, #7
 617 0066 1393     		str	r3, [sp, #76]
 195:Src/main.c    ****   {
 618              		.loc 1 195 3 is_stmt 1 view .LVU176
 195:Src/main.c    ****   {
 619              		.loc 1 195 7 is_stmt 0 view .LVU177
 620 0068 08A8     		add	r0, sp, #32
 621 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
 622              	.LVL32:
 195:Src/main.c    ****   {
 623              		.loc 1 195 6 view .LVU178
 624 006e 98B9     		cbnz	r0, .L29
 201:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 625              		.loc 1 201 3 is_stmt 1 view .LVU179
 201:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 626              		.loc 1 201 31 is_stmt 0 view .LVU180
 627 0070 0F23     		movs	r3, #15
 628 0072 0393     		str	r3, [sp, #12]
 203:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 629              		.loc 1 203 3 is_stmt 1 view .LVU181
 203:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 630              		.loc 1 203 34 is_stmt 0 view .LVU182
 631 0074 0223     		movs	r3, #2
 632 0076 0493     		str	r3, [sp, #16]
 204:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 633              		.loc 1 204 3 is_stmt 1 view .LVU183
 204:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 634              		.loc 1 204 35 is_stmt 0 view .LVU184
 635 0078 0023     		movs	r3, #0
ARM GAS  /tmp/cc0gHuim.s 			page 21


 636 007a 0593     		str	r3, [sp, #20]
 205:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 637              		.loc 1 205 3 is_stmt 1 view .LVU185
 205:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 638              		.loc 1 205 36 is_stmt 0 view .LVU186
 639 007c 4FF4A053 		mov	r3, #5120
 640 0080 0693     		str	r3, [sp, #24]
 206:Src/main.c    **** 
 641              		.loc 1 206 3 is_stmt 1 view .LVU187
 206:Src/main.c    **** 
 642              		.loc 1 206 36 is_stmt 0 view .LVU188
 643 0082 4FF48053 		mov	r3, #4096
 644 0086 0793     		str	r3, [sp, #28]
 208:Src/main.c    ****   {
 645              		.loc 1 208 3 is_stmt 1 view .LVU189
 208:Src/main.c    ****   {
 646              		.loc 1 208 7 is_stmt 0 view .LVU190
 647 0088 0521     		movs	r1, #5
 648 008a 03A8     		add	r0, sp, #12
 649 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 650              	.LVL33:
 208:Src/main.c    ****   {
 651              		.loc 1 208 6 view .LVU191
 652 0090 20B9     		cbnz	r0, .L30
 212:Src/main.c    **** 
 653              		.loc 1 212 1 view .LVU192
 654 0092 15B0     		add	sp, sp, #84
 655              	.LCFI10:
 656              		.cfi_remember_state
 657              		.cfi_def_cfa_offset 4
 658              		@ sp needed
 659 0094 5DF804FB 		ldr	pc, [sp], #4
 660              	.L29:
 661              	.LCFI11:
 662              		.cfi_restore_state
 197:Src/main.c    ****   }
 663              		.loc 1 197 5 is_stmt 1 view .LVU193
 664 0098 FFF7FEFF 		bl	Error_Handler
 665              	.LVL34:
 666              	.L30:
 210:Src/main.c    ****   }
 667              		.loc 1 210 5 view .LVU194
 668 009c FFF7FEFF 		bl	Error_Handler
 669              	.LVL35:
 670              	.L32:
 671              		.align	2
 672              	.L31:
 673 00a0 00380240 		.word	1073887232
 674 00a4 00700040 		.word	1073770496
 675              		.cfi_endproc
 676              	.LFE160:
 678              		.section	.text.main,"ax",%progbits
 679              		.align	1
 680              		.global	main
 681              		.syntax unified
 682              		.thumb
 683              		.thumb_func
ARM GAS  /tmp/cc0gHuim.s 			page 22


 684              		.fpu fpv4-sp-d16
 686              	main:
 687              	.LFB159:
  83:Src/main.c    ****   /* USER CODE BEGIN 1 */
 688              		.loc 1 83 1 view -0
 689              		.cfi_startproc
 690              		@ Volatile: function does not return.
 691              		@ args = 0, pretend = 0, frame = 0
 692              		@ frame_needed = 0, uses_anonymous_args = 0
 693 0000 08B5     		push	{r3, lr}
 694              	.LCFI12:
 695              		.cfi_def_cfa_offset 8
 696              		.cfi_offset 3, -8
 697              		.cfi_offset 14, -4
  91:Src/main.c    **** 	while(!(RCC->CR & RCC_CR_HSERDY))
 698              		.loc 1 91 3 view .LVU196
  91:Src/main.c    **** 	while(!(RCC->CR & RCC_CR_HSERDY))
 699              		.loc 1 91 11 is_stmt 0 view .LVU197
 700 0002 114A     		ldr	r2, .L38
 701 0004 1368     		ldr	r3, [r2]
 702 0006 43F48033 		orr	r3, r3, #65536
 703 000a 1360     		str	r3, [r2]
  92:Src/main.c    **** 		__ISB();
 704              		.loc 1 92 2 is_stmt 1 view .LVU198
  92:Src/main.c    **** 		__ISB();
 705              		.loc 1 92 7 is_stmt 0 view .LVU199
 706 000c 01E0     		b	.L34
 707              	.L35:
  93:Src/main.c    **** 	__DSB(); // set breakpoint here, is it reached?
 708              		.loc 1 93 3 is_stmt 1 view .LVU200
 709              	.LBB17:
 710              	.LBI17:
 711              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc0gHuim.s 			page 23


  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  /tmp/cc0gHuim.s 			page 24


  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
ARM GAS  /tmp/cc0gHuim.s 			page 25


 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
ARM GAS  /tmp/cc0gHuim.s 			page 26


 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/cc0gHuim.s 			page 27


 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc0gHuim.s 			page 28


 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
ARM GAS  /tmp/cc0gHuim.s 			page 29


 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc0gHuim.s 			page 30


 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
ARM GAS  /tmp/cc0gHuim.s 			page 31


 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc0gHuim.s 			page 32


 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
ARM GAS  /tmp/cc0gHuim.s 			page 33


 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
ARM GAS  /tmp/cc0gHuim.s 			page 34


 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/cc0gHuim.s 			page 35


 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc0gHuim.s 			page 36


 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
ARM GAS  /tmp/cc0gHuim.s 			page 37


 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 712              		.loc 2 866 27 view .LVU201
 713              	.LBB18:
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 714              		.loc 2 868 3 view .LVU202
 715              		.syntax unified
 716              	@ 868 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 717 000e BFF36F8F 		isb 0xF
 718              	@ 0 "" 2
 719              		.thumb
 720              		.syntax unified
 721              	.L34:
 722              	.LBE18:
ARM GAS  /tmp/cc0gHuim.s 			page 38


 723              	.LBE17:
  92:Src/main.c    **** 		__ISB();
 724              		.loc 1 92 7 view .LVU203
  92:Src/main.c    **** 		__ISB();
 725              		.loc 1 92 13 is_stmt 0 view .LVU204
 726 0012 0D4B     		ldr	r3, .L38
 727 0014 1B68     		ldr	r3, [r3]
  92:Src/main.c    **** 		__ISB();
 728              		.loc 1 92 7 view .LVU205
 729 0016 13F4003F 		tst	r3, #131072
 730 001a F8D0     		beq	.L35
  94:Src/main.c    **** 
 731              		.loc 1 94 2 is_stmt 1 view .LVU206
 732              	.LBB19:
 733              	.LBI19:
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 734              		.loc 2 877 27 view .LVU207
 735              	.LBB20:
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 736              		.loc 2 879 3 view .LVU208
 737              		.syntax unified
 738              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 739 001c BFF34F8F 		dsb 0xF
 740              	@ 0 "" 2
 741              		.thumb
 742              		.syntax unified
 743              	.LBE20:
 744              	.LBE19:
  97:Src/main.c    **** 
 745              		.loc 1 97 3 view .LVU209
 746 0020 FFF7FEFF 		bl	HAL_Init
 747              	.LVL36:
 104:Src/main.c    **** 
 748              		.loc 1 104 3 view .LVU210
 749 0024 FFF7FEFF 		bl	SystemClock_Config
 750              	.LVL37:
 111:Src/main.c    ****   MX_USART3_UART_Init();
 751              		.loc 1 111 3 view .LVU211
 752 0028 FFF7FEFF 		bl	MX_GPIO_Init
 753              	.LVL38:
 112:Src/main.c    ****   // MX_USB_OTG_FS_PCD_Init();
 754              		.loc 1 112 3 view .LVU212
 755 002c FFF7FEFF 		bl	MX_USART3_UART_Init
 756              	.LVL39:
 131:Src/main.c    **** 
 757              		.loc 1 131 3 view .LVU213
 758 0030 FFF7FEFF 		bl	osKernelInitialize
 759              	.LVL40:
ARM GAS  /tmp/cc0gHuim.s 			page 39


 151:Src/main.c    **** 
 760              		.loc 1 151 3 view .LVU214
 151:Src/main.c    **** 
 761              		.loc 1 151 23 is_stmt 0 view .LVU215
 762 0034 054A     		ldr	r2, .L38+4
 763 0036 0021     		movs	r1, #0
 764 0038 0548     		ldr	r0, .L38+8
 765 003a FFF7FEFF 		bl	osThreadNew
 766              	.LVL41:
 151:Src/main.c    **** 
 767              		.loc 1 151 21 view .LVU216
 768 003e 054B     		ldr	r3, .L38+12
 769 0040 1860     		str	r0, [r3]
 158:Src/main.c    ****  
 770              		.loc 1 158 3 is_stmt 1 view .LVU217
 771 0042 FFF7FEFF 		bl	osKernelStart
 772              	.LVL42:
 773              	.L36:
 163:Src/main.c    ****   {
 774              		.loc 1 163 3 discriminator 1 view .LVU218
 168:Src/main.c    ****   /* USER CODE END 3 */
 775              		.loc 1 168 3 discriminator 1 view .LVU219
 163:Src/main.c    ****   {
 776              		.loc 1 163 9 discriminator 1 view .LVU220
 777 0046 FEE7     		b	.L36
 778              	.L39:
 779              		.align	2
 780              	.L38:
 781 0048 00380240 		.word	1073887232
 782 004c 00000000 		.word	.LANCHOR0
 783 0050 00000000 		.word	StartDefaultTask
 784 0054 00000000 		.word	defaultTaskHandle
 785              		.cfi_endproc
 786              	.LFE159:
 788              		.global	defaultTask_attributes
 789              		.section	.rodata.str1.4,"aMS",%progbits,1
 790              		.align	2
 791              	.LC4:
 792 0000 64656661 		.ascii	"defaultTask\000"
 792      756C7454 
 792      61736B00 
 793              		.comm	defaultTaskHandle,4,4
 794              		.comm	hpcd_USB_OTG_FS,1032,4
 795              		.comm	huart3,64,4
 796              		.section	.rodata.defaultTask_attributes,"a"
 797              		.align	2
 798              		.set	.LANCHOR0,. + 0
 801              	defaultTask_attributes:
 802 0000 00000000 		.word	.LC4
 803 0004 00000000 		.space	16
 803      00000000 
 803      00000000 
 803      00000000 
 804 0014 00020000 		.word	512
 805 0018 18000000 		.word	24
 806 001c 00000000 		.space	8
 806      00000000 
ARM GAS  /tmp/cc0gHuim.s 			page 40


 807              		.text
 808              	.Letext0:
 809              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 810              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 811              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 812              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f429xx.h"
 813              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 814              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 815              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 816              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 817              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 818              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_eth.h"
 819              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 820              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usb.h"
 821              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_pcd.h"
 822              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 823              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 824              		.file 18 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 825              		.file 19 "/usr/include/newlib/machine/_default_types.h"
 826              		.file 20 "/usr/include/newlib/sys/_types.h"
 827              		.file 21 "/usr/include/newlib/sys/reent.h"
 828              		.file 22 "/usr/include/newlib/sys/lock.h"
 829              		.file 23 "/usr/include/newlib/stdlib.h"
 830              		.file 24 "/usr/include/newlib/sys/types.h"
 831              		.file 25 "/usr/include/newlib/time.h"
 832              		.file 26 "Middlewares/Third_Party/LwIP/src/include/lwip/arch.h"
 833              		.file 27 "/usr/include/newlib/ctype.h"
 834              		.file 28 "Middlewares/Third_Party/LwIP/src/include/lwip/memp.h"
 835              		.file 29 "Middlewares/Third_Party/LwIP/src/include/lwip/priv/memp_priv.h"
 836              		.file 30 "Middlewares/Third_Party/LwIP/src/include/lwip/err.h"
 837              		.file 31 "Middlewares/Third_Party/LwIP/src/include/lwip/pbuf.h"
 838              		.file 32 "Middlewares/Third_Party/LwIP/src/include/lwip/ip4_addr.h"
 839              		.file 33 "Middlewares/Third_Party/LwIP/src/include/lwip/ip_addr.h"
 840              		.file 34 "Middlewares/Third_Party/LwIP/src/include/lwip/netif.h"
 841              		.file 35 "Middlewares/Third_Party/LwIP/src/include/lwip/prot/ip4.h"
 842              		.file 36 "Middlewares/Third_Party/LwIP/src/include/lwip/prot/ethernet.h"
 843              		.file 37 "Middlewares/Third_Party/LwIP/src/include/netif/ethernet.h"
 844              		.file 38 "Middlewares/Third_Party/LwIP/src/include/lwip/ip.h"
 845              		.file 39 "Middlewares/Third_Party/LwIP/src/include/lwip/udp.h"
 846              		.file 40 "Middlewares/Third_Party/LwIP/system/arch/sys_arch.h"
 847              		.file 41 "Middlewares/Third_Party/LwIP/src/include/lwip/timeouts.h"
 848              		.file 42 "Middlewares/Third_Party/LwIP/src/include/lwip/tcpip.h"
 849              		.file 43 "Inc/lwip.h"
 850              		.file 44 "Middlewares/Third_Party/LwIP/src/include/lwip/inet.h"
 851              		.file 45 "Middlewares/Third_Party/LwIP/src/include/lwip/errno.h"
 852              		.file 46 "Middlewares/Third_Party/LwIP/src/include/lwip/sockets.h"
 853              		.file 47 "Middlewares/Third_Party/LwIP/src/include/lwip/def.h"
 854              		.file 48 "<built-in>"
ARM GAS  /tmp/cc0gHuim.s 			page 41


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc0gHuim.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc0gHuim.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc0gHuim.s:184    .text.MX_GPIO_Init:00000000000000b4 $d
     /tmp/cc0gHuim.s:190    .rodata.StartDefaultTask.str1.4:0000000000000000 $d
     /tmp/cc0gHuim.s:203    .text.StartDefaultTask:0000000000000000 $t
     /tmp/cc0gHuim.s:210    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/cc0gHuim.s:417    .text.StartDefaultTask:00000000000000e4 $d
                            *COM*:0000000000000040 huart3
     /tmp/cc0gHuim.s:427    .text.Error_Handler:0000000000000000 $t
     /tmp/cc0gHuim.s:434    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc0gHuim.s:451    .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/cc0gHuim.s:457    .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/cc0gHuim.s:512    .text.MX_USART3_UART_Init:000000000000002c $d
     /tmp/cc0gHuim.s:518    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc0gHuim.s:525    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc0gHuim.s:673    .text.SystemClock_Config:00000000000000a0 $d
     /tmp/cc0gHuim.s:679    .text.main:0000000000000000 $t
     /tmp/cc0gHuim.s:686    .text.main:0000000000000000 main
     /tmp/cc0gHuim.s:781    .text.main:0000000000000048 $d
                            *COM*:0000000000000004 defaultTaskHandle
     /tmp/cc0gHuim.s:801    .rodata.defaultTask_attributes:0000000000000000 defaultTask_attributes
     /tmp/cc0gHuim.s:790    .rodata.str1.4:0000000000000000 $d
                            *COM*:0000000000000408 hpcd_USB_OTG_FS
     /tmp/cc0gHuim.s:797    .rodata.defaultTask_attributes:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_UART_Transmit
MX_LWIP_Init
lwip_socket
lwip_htonl
lwip_htons
lwip_bind
lwip_listen
lwip_accept
lwip_close
lwip_recv
lwip_send
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osKernelInitialize
osThreadNew
osKernelStart
